{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Key","props","window","addEventListener","e","audio","document","querySelector","keyCode","display","getElementById","kcd","innerHTML","81","87","69","65","83","68","90","88","67","currentTime","play","data-keycode","keycode","id","name","className","onClick","getElementsByClassName","index","kbd","src","DrumMachine","data-src","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNA4CA,SAASA,EAAIC,GAuCX,OAdAC,OAAOC,iBAAiB,WAvBxB,SAAeC,GACb,IAAMC,EAAQC,SAASC,cAAT,8BAA8CH,EAAEI,QAAhD,OACd,GAAKH,EAAL,CAEA,IAAMI,EAAUH,SAASI,eAAe,QAYlCC,EAAMP,EAAEI,QACdC,EAAQG,UAAR,UAZiB,CACfC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KAG0BV,IAEhCN,EAAMiB,YAAc,EACpBjB,EAAMkB,WAkBN,yBACEC,eAAcvB,EAAMwB,QACpBC,GAAIzB,EAAM0B,KACVC,UAAU,WACVC,QAhBJ,SAAmBzB,GACjB,IAAMC,EAAQC,SAASwB,uBAAT,QAAwC7B,EAAM8B,OACvD1B,IAEWC,SAASI,eAAe,QAChCE,UAAR,UAAuBX,EAAM+B,KAE7B3B,EAAMiB,YAAc,EACpBjB,EAAMkB,UAUJ,gCACGtB,EAAM+B,IACP,2BACER,eAAcvB,EAAMwB,QACpBG,UAAU,OACVF,GAAIzB,EAAM+B,IACVC,IAAKhC,EAAMgC,QAONC,MAjFf,WACE,OACE,yBAAKR,GAAG,gBACN,yBAAKA,GAAG,aACN,kBAAC1B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IArB1C,oFAqBqDN,KAAK,SACpD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IApB1C,qFAoBsDN,KAAK,WACrD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IAnB1C,oFAmBqDN,KAAK,SACpD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IAlB1C,uFAkBwDN,KAAK,YACvD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IA3B1C,oFA2BqDN,KAAK,SACpD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IAlB1C,oFAkBqDN,KAAK,SACpD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IAjB1C,qFAiBsDN,KAAK,UACrD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IAd1C,mFAcoDN,KAAK,QACnD,kBAAC3B,EAAD,CAAKyB,QAAQ,KAAKM,MAAM,IAAIC,IAAI,IAAIC,IAjB1C,oFAiBqDN,KAAK,UAEtD,yBAAKD,GAAG,UAAUS,WAAS,IACzB,mCACA,uBAAGT,GAAG,YC1BMU,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASI,eAAe,SD0HpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65282a89.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nconst boom =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613605/boom_jn5xpp.wav\";\nconst clap =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613605/clap_rhpwgi.wav\";\nconst hihat =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613605/hihat_gytfxf.wav\";\nconst kick =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613605/kick_tydovs.wav\";\nconst openhat =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613605/openhat_ofoldz.wav\";\nconst ride =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613606/ride_qaymwz.wav\";\nconst snare =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613605/snare_e6whew.wav\";\nconst tink =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613605/tink_inhrhs.wav\";\nconst tom =\n  \"https://res.cloudinary.com/juancdominici/video/upload/v1602613606/tom_d6zmvw.wav\";\n\n\nfunction DrumMachine() {\n  return (\n    <div id=\"drum-machine\">\n      <div id=\"container\">\n        <Key keycode=\"81\" index=\"0\" kbd=\"Q\" src={clap} name=\"clap\" />\n        <Key keycode=\"87\" index=\"1\" kbd=\"W\" src={hihat} name=\"hi-hat\" />\n        <Key keycode=\"69\" index=\"2\" kbd=\"E\" src={kick} name=\"kick\" />\n        <Key keycode=\"65\" index=\"3\" kbd=\"A\" src={openhat} name=\"openhat\" />\n        <Key keycode=\"83\" index=\"4\" kbd=\"S\" src={boom} name=\"boom\" />\n        <Key keycode=\"68\" index=\"5\" kbd=\"D\" src={ride} name=\"ride\" />\n        <Key keycode=\"90\" index=\"6\" kbd=\"Z\" src={snare} name=\"snare\" />\n        <Key keycode=\"88\" index=\"7\" kbd=\"X\" src={tom} name=\"tom\" />\n        <Key keycode=\"67\" index=\"8\" kbd=\"C\" src={tink} name=\"tink\" />\n      </div>\n      <div id=\"display\" data-src=\"\">\n        <p>Pad:</p>\n        <p id=\"info\"></p>\n      </div>\n    </div>\n  );\n}\n\nfunction Key(props) {\n  //plays on keydown\n  function onKey(e) {\n    const audio = document.querySelector(`audio[data-keycode=\"${e.keyCode}\"]`);\n    if (!audio) return;\n\n    const display = document.getElementById(\"info\");\n    const keycodes = {\n      81: \"Q\",\n      87: \"W\",\n      69: \"E\",\n      65: \"A\",\n      83: \"S\",\n      68: \"D\",\n      90: \"Z\",\n      88: \"X\",\n      67: \"C\",\n    };\n    const kcd = e.keyCode;\n    display.innerHTML = `${keycodes[kcd]}`;\n\n    audio.currentTime = 0;\n    audio.play();\n  }\n\n  window.addEventListener(\"keydown\", onKey);\n\n  //plays on click\n  function playSound(e) {\n    const audio = document.getElementsByClassName(`clip`)[props.index];\n    if (!audio) return;\n\n    const display = document.getElementById(\"info\");\n    display.innerHTML = `${props.kbd}`;\n\n    audio.currentTime = 0;\n    audio.play();\n  }\n\n  return (\n    <div\n      data-keycode={props.keycode}\n      id={props.name}\n      className=\"drum-pad\"\n      onClick={playSound}\n    >\n      <button>\n        {props.kbd}\n        <audio\n          data-keycode={props.keycode}\n          className=\"clip\"\n          id={props.kbd}\n          src={props.src}\n        />\n      </button>\n    </div>\n  );\n}\n\nexport default DrumMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DrumMachine from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DrumMachine />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}